# Heimdall SDR Project Configuration

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "heimdall-sdr"
version = "0.1.0"
description = "AI-driven platform for real-time localization of radio sources"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "CC Non-Commercial"}

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",      # pycodestyle errors
  "W",      # pycodestyle warnings
  "F",      # pyflakes
  "I",      # isort
  "C",      # flake8-comprehensions
  "B",      # flake8-bugbear
  "N",      # pep8-naming
  "UP",     # pyupgrade
  "S",      # bandit (security)
]
ignore = [
  "E501",   # line too long (handled by black)
  "S101",   # use of assert (common in tests)
  "S104",   # possible binding to all interfaces
  "S105",   # possible hardcoded password
  "S106",   # possible hardcoded password
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "S105", "S106"]  # Allow asserts and test credentials in tests
"conftest.py" = ["S101"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_subclassing_any = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Relax strict mode for existing codebase
[[tool.mypy.overrides]]
module = [
  "services.*",
  "tests.*",
]
disallow_untyped_defs = false
disallow_untyped_calls = false

# Ignore third-party packages without type stubs
[[tool.mypy.overrides]]
module = [
  "celery.*",
  "aiohttp.*",
  "minio.*",
  "sqlalchemy.*",
  "alembic.*",
  "pytest_asyncio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["services"]
norecursedirs = ["frontend", "scripts", ".git", ".venv", "node_modules", "__pycache__", ".pytest_cache", "coverage_reports", "docs", "db"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "-v",
  "--strict-markers",
  "--tb=short",
  "--cov=services",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--cov-report=html",
]
markers = [
  "e2e: End-to-end tests that require running services",
  "integration: Integration tests",
  "unit: Unit tests",
]
# Minimum coverage threshold (80%)
[tool.coverage.run]
source = ["services"]
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/venv/*",
  "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80.0

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "coverage_reports/html"
