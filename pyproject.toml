# Heimdall SDR Project Configuration

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "heimdall-sdr"
version = "0.3.1"
description = "AI-driven platform for real-time localization of radio sources"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "CC Non-Commercial" }

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "N",  # pep8-naming
    "UP", # pyupgrade
    "S",  # bandit (security)
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert (common in tests)
    "S104",  # possible binding to all interfaces
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password
    "S108",  # hardcoded-temp-file (acceptable for /tmp usage)
    "S110",  # try-except-pass (acceptable in some contexts)
    "S113",  # request-without-timeout (not critical for internal services)
    "S301",  # suspicious-pickle-usage (acceptable for model serialization)
    "S603",  # subprocess-without-shell-equals-true (acceptable when using lists)
    "S607",  # start-process-with-partial-path (acceptable for system commands)
    "S608",  # hardcoded-sql-expression (acceptable for DDL)
    "B904",  # raise-without-from-inside-except (acceptable in many contexts)
    "E402",  # module-import-not-at-top-of-file (needed for some dynamic imports)
    "E722",  # bare-except (acceptable in specific error handling)
    "B007",  # unused-loop-control-variable (acceptable when only iteration matters)
    "B008",  # function-call-in-default-argument (acceptable for Pydantic/FastAPI)
    "B023",  # function-uses-loop-variable (acceptable in many contexts)
    "C901",  # complex-structure (acceptable for existing complex functions)
    "E741",  # ambiguous-variable-name (existing code)
    "F401",  # unused-import (may be used for re-exports)
    "N802",  # invalid-function-name (acceptable for FastAPI endpoints)
    "N806",  # non-lowercase-variable-in-function (acceptable for ML/matrix code)
    "N812",  # lowercase-imported-as-non-lowercase (acceptable for F = torch.nn.functional)
    "UP007", # non-pep604-annotation-union (Optional is still valid)
    "UP008", # super-call-with-parameters (valid Python 3.11 syntax)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",
    "S105",
    "S106",
] # Allow asserts and test credentials in tests
"conftest.py" = ["S101"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
check_untyped_defs = false
no_implicit_optional = false
explicit_package_bases = true
namespace_packages = true
# Gradual adoption - enable strict mode for new code
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
strict_equality = false
strict_optional = false
implicit_reexport = false
warn_unreachable = false
show_error_codes = true
exclude = ["venv", ".venv", "tests"]
# Disable specific error codes for gradual migration
disable_error_code = [
    "import-not-found",
    "import-untyped",
    "call-arg",
    "attr-defined",
    "no-untyped-def",
    "dict-item",
    "no-redef",
    "assignment",
    "arg-type",
    "valid-type",
    "var-annotated",
    "union-attr",
    "return-value",
    "misc",
    "unreachable",
    "operator",
    "annotation-unchecked",
]

# Enable strict mode for common shared code (new code should be strict)
[[tool.mypy.overrides]]
module = "services.common.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_return_any = true

# Tests can have more relaxed type checking
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Ignore third-party packages without type stubs
[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "torch.*",
    "sklearn.*",
    "celery.*",
    "aiohttp.*",
    "minio.*",
    "sqlalchemy.*",
    "alembic.*",
    "pytest_asyncio.*",
    "torchaudio.*",
    "torchvision.*",
    "lightning.*",
    "mlflow.*",
    "onnxruntime.*",
    "pydantic_settings.*",
    "fastapi.*",
    "uvicorn.*",
    "boto3.*",
    "botocore.*",
    "redis.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["services"]
norecursedirs = [
    "frontend",
    "scripts",
    ".git",
    ".venv",
    "node_modules",
    "__pycache__",
    ".pytest_cache",
    "coverage_reports",
    "docs",
    "db",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
]
markers = [
    "e2e: End-to-end tests that require running services",
    "integration: Integration tests",
    "unit: Unit tests",
]
# Minimum coverage threshold (80%)
[tool.coverage.run]
source = ["services"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80.0

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "coverage_reports/html"

# Ignore all errors in scripts (utility scripts, not production code)
[[tool.mypy.overrides]]
module = "scripts.*"
ignore_errors = true
