name: Dependency Updates

on:
  schedule:
    # Run every Monday at 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install pip-tools and safety
        run: |
          pip install --upgrade pip
          pip install pip-tools safety
          
      - name: Run lock requirements script
        id: lock
        run: |
          python scripts/lock_requirements.py --verbose > lock_output.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet services/requirements/*.lock; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in lock files"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in lock files"
            git diff --stat services/requirements/*.lock
          fi
          
      - name: Count updates
        if: steps.changes.outputs.has_changes == 'true'
        id: count
        run: |
          # Count number of changed packages
          updates=$(git diff services/requirements/*.lock | grep -c '^+[a-z]' || echo "0")
          echo "update_count=$updates" >> $GITHUB_OUTPUT
          
          # Check for vulnerabilities fixed
          vulns_fixed=0
          if [ -f services/requirements/audit_report.json ]; then
            vulns_fixed=$(jq '.vulnerabilities | length' services/requirements/audit_report.json || echo "0")
          fi
          echo "vulnerabilities_fixed=$vulns_fixed" >> $GITHUB_OUTPUT
          
      - name: Run test suite
        if: steps.changes.outputs.has_changes == 'true'
        id: tests
        run: |
          # Install test dependencies
          pip install pytest pytest-asyncio pytest-cov
          
          # Run tests (simplified - adjust based on actual test setup)
          python -m pytest services/*/tests/ -v --tb=short || echo "test_status=failed" >> $GITHUB_OUTPUT
          echo "test_status=passed" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Generate changelog
        if: steps.changes.outputs.has_changes == 'true'
        id: changelog
        run: |
          # Extract changes from git diff
          git diff services/requirements/*.lock > changes.diff
          
          # Parse changes into a summary
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Updated Packages" >> $GITHUB_OUTPUT
          git diff services/requirements/*.lock | grep '^[+-][a-z]' | sort -u | head -20 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true' && steps.tests.outputs.test_status == 'passed'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (automated)'
          branch: automated-dependency-updates
          delete-branch: true
          title: 'chore: Update ${{ steps.count.outputs.update_count }} dependencies'
          body: |
            ## Dependency Updates
            
            ### Summary
            - Updated ${{ steps.count.outputs.update_count }} packages
            - Fixed ${{ steps.count.outputs.vulnerabilities_fixed }} vulnerabilities
            - Tests: ✅ All passed
            
            ### Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Security
            - Vulnerabilities fixed: ${{ steps.count.outputs.vulnerabilities_fixed }}
            
            ### Testing
            ✅ All tests passed
            ✅ Lock files generated successfully
            
            ### Action Items
            - [ ] Review changelog for breaking changes
            - [ ] Verify performance with new versions
            - [ ] Check for any new deprecation warnings
            
            ---
            *This PR was automatically generated by the dependency update workflow.*
          labels: |
            dependencies
            automated
            
      - name: Create issue for failed tests
        if: steps.changes.outputs.has_changes == 'true' && steps.tests.outputs.test_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const lockOutput = fs.readFileSync('lock_output.txt', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependency update failed - Tests failing',
              body: `## Dependency Update Failed
              
              The automated dependency update process completed, but tests failed.
              
              ### Lock Output
              \`\`\`
              ${lockOutput}
              \`\`\`
              
              ### Action Required
              - Review the test failures
              - Check for breaking changes in updated packages
              - Manually update dependencies if needed
              `,
              labels: ['dependencies', 'needs-review', 'bug']
            });
            
      - name: Comment on completion
        if: always()
        run: |
          echo "::notice::Dependency update workflow completed"
          echo "Changes detected: ${{ steps.changes.outputs.has_changes }}"
          echo "Test status: ${{ steps.tests.outputs.test_status || 'skipped' }}"
