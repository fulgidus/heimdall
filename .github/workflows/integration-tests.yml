name: Integration Tests

on:
  push:
    branches: [main, develop, fix/**]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Define credentials once for the entire job
    env:
      # PostgreSQL credentials (must match docker-compose and .env.example)
      POSTGRES_DB: heimdall
      POSTGRES_USER: heimdall_user
      POSTGRES_PASSWORD: changeme
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

      # RabbitMQ credentials
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: 5672

      # Redis configuration
      REDIS_HOST: localhost
      REDIS_PORT: 6379

      # MinIO configuration
      MINIO_ENDPOINT: localhost:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin

      # Keycloak configuration
      KEYCLOAK_URL: http://localhost:8080
      KEYCLOAK_REALM: heimdall

      # Python path
      PYTHONPATH: ${{ github.workspace }}

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start MinIO container
        run: |
          # Find the GitHub Actions network created for services
          NETWORK=$(docker network ls --format '{{.Name}}' | grep github || echo "bridge")
          echo "Using network: $NETWORK"

          docker run -d \
            --name minio \
            --network "$NETWORK" \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            -p 9000:9000 \
            -p 9001:9001 \
            minio/minio:latest \
            server /data --console-address ":9001"

          # Wait for MinIO to be ready
          echo "Waiting for MinIO to be ready..."
          timeout 60 bash -c 'until curl -sf http://localhost:9000/minio/health/live; do sleep 2; done'
          echo "MinIO is ready"

      - name: Start Keycloak container
        run: |
          # Find the GitHub Actions network created for services
          NETWORK=$(docker network ls --format '{{.Name}}' | grep github || echo "bridge")
          echo "Using network: $NETWORK"

          docker run -d \
            --name keycloak \
            --network "$NETWORK" \
            -e KEYCLOAK_ADMIN=admin \
            -e KEYCLOAK_ADMIN_PASSWORD=admin \
            -e KC_HTTP_ENABLED=true \
            -e KC_HOSTNAME_STRICT=false \
            -v ${{ github.workspace }}/db/keycloak:/opt/keycloak/data/import:ro \
            -p 8080:8080 \
            quay.io/keycloak/keycloak:23.0 \
            start-dev

          # Wait for Keycloak to be ready
          echo "Waiting for Keycloak to be ready..."
          timeout 120 bash -c 'until curl -sf http://localhost:8080/health/ready; do sleep 2; done'
          echo "Keycloak is ready"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio httpx

          # Install service dependencies
          for service in api-gateway data-ingestion-web rf-acquisition inference training; do
            if [ -f services/$service/requirements.txt ]; then
              echo "Installing requirements for $service"
              pip install -r services/$service/requirements.txt
            fi
          done

          # Install auth module dependencies
          if [ -f services/common/auth/requirements.txt ]; then
            pip install -r services/common/auth/requirements.txt
          fi

      - name: Initialize PostgreSQL database
        run: |
          export PGPASSWORD=${{ env.POSTGRES_PASSWORD }}
          psql -h ${{ env.POSTGRES_HOST }} -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f db/01-init.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: Configure Keycloak realm
        run: |
          # Keycloak is already running and ready from the previous step
          # Import Heimdall realm
          docker exec keycloak \
            /opt/keycloak/bin/kc.sh import \
            --file /opt/keycloak/data/import/heimdall-realm.json \
            --override true || true

      - name: Run API Gateway integration tests
        run: |
          cd services/api-gateway
          pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Run Data Ingestion integration tests
        run: |
          cd services/data-ingestion-web
          if [ -d tests/integration ]; then
            pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=term
          fi

      - name: Run RF Acquisition integration tests
        run: |
          cd services/rf-acquisition
          if [ -d tests/integration ]; then
            pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=term
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./services/*/coverage.xml
          flags: integration-tests
          name: integration-coverage

      - name: Integration test summary
        if: always()
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Integration tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Services tested:" >> $GITHUB_STEP_SUMMARY
          echo "- API Gateway" >> $GITHUB_STEP_SUMMARY
          echo "- Data Ingestion Web" >> $GITHUB_STEP_SUMMARY
          echo "- RF Acquisition" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup containers
        if: always()
        run: |
          echo "Cleaning up manually started containers..."
          docker stop minio keycloak 2>/dev/null || true
          docker rm minio keycloak 2>/dev/null || true
          echo "Cleanup completed"
