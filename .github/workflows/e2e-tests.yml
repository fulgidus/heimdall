name: E2E Tests

on:
  push:
    branches: [fix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Enable debug mode"
        required: false
        default: "false"

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      pull-requests: write

    env:
      BASE_URL: http://localhost:3001
      TEST_BACKEND_ORIGIN: http://localhost:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "🧹 Freeing up disk space..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af
          sudo docker container prune -f
          sudo apt-get clean
          echo "📊 Disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Start backend services
        run: |
          echo "🚀 Starting essential backend services for E2E tests..."
          # Start infrastructure first
          docker compose -f docker-compose.yml up -d postgres redis

          echo "📁 Verifying service directories exist..."
          for service in api-gateway rf-acquisition data-ingestion-web inference; do
            echo "  Checking services/$service/src/..."
            ls -la services/$service/src/ > /dev/null || { echo "❌ Missing src/ directory for $service"; exit 1; }
            echo "  Checking services/$service/requirements.txt..."
            ls services/$service/requirements.txt > /dev/null || { echo "❌ Missing requirements.txt for $service"; exit 1; }
          done
          echo "✅ All required files present"

          # Build and start only essential microservices to save disk space
          # Skip training service as it's not needed for E2E tests
          echo "🔨 Building services..."
          docker compose -f docker-compose.services.yml build api-gateway rf-acquisition data-ingestion-web inference || {
            echo "❌ Build failed! Showing docker compose config..."
            docker compose -f docker-compose.services.yml config
            exit 1
          }

          echo "🚀 Starting services..."
          docker compose -f docker-compose.services.yml up -d api-gateway rf-acquisition data-ingestion-web inference

          echo "📋 Service status:"
          docker compose ps

          echo "💾 Disk space after build:"
          df -h

      - name: Clean up Docker build artifacts
        run: |
          echo "🧹 Cleaning up Docker build artifacts..."
          docker builder prune -af
          docker image prune -af
          echo "💾 Disk space after cleanup:"
          df -h

      - name: Wait for backend health
        timeout-minutes: 5
        run: |
          echo "🏥 Waiting for backend services to be healthy..."

          max_attempts=60
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ API Gateway is healthy"
              break
            fi
            
            attempt=$((attempt + 1))
            echo "  Attempt $attempt/$max_attempts - Waiting for API Gateway..."
            sleep 5
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "❌ API Gateway failed to become healthy"
            echo "📋 Service logs:"
            docker compose logs api-gateway
            exit 1
          fi

          # Verify other services
          curl -f http://localhost:8001/health || echo "⚠️  RF Acquisition not ready (non-critical)"
          curl -f http://localhost:8004/health || echo "⚠️  Data Ingestion not ready (non-critical)"

          echo "✅ Backend services are ready"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start frontend dev server
        run: |
          cd frontend
          npm run dev &

          # Wait for frontend to be ready
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:3001 > /dev/null 2>&1; then
              echo "✅ Frontend server is ready"
              break
            fi
            
            attempt=$((attempt + 1))
            echo "  Waiting for frontend... ($attempt/$max_attempts)"
            sleep 2
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Frontend server failed to start"
            exit 1
          fi

      - name: Run Playwright E2E tests
        id: e2e_tests
        run: |
          cd frontend

          echo "🧪 Running E2E tests against real backend..."
          npx playwright test --reporter=html,json,list
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_BACKEND_ORIGIN: ${{ env.TEST_BACKEND_ORIGIN }}
          CI: true

      - name: Collect backend logs (on failure)
        if: failure()
        run: |
          echo "📋 Collecting backend service logs..."
          mkdir -p e2e-artifacts/logs

          docker compose logs api-gateway > e2e-artifacts/logs/api-gateway.log
          docker compose logs rf-acquisition > e2e-artifacts/logs/rf-acquisition.log
          docker compose logs data-ingestion-web > e2e-artifacts/logs/data-ingestion-web.log
          docker compose logs postgres > e2e-artifacts/logs/postgres.log
          docker compose logs redis > e2e-artifacts/logs/redis.log

          echo "✅ Logs collected"

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: frontend/test-results/
          retention-days: 7

      - name: Upload backend logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: e2e-artifacts/logs/
          retention-days: 7

      - name: Upload HAR files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-har
          path: frontend/playwright-report/*.har
          retention-days: 7

      - name: Comment PR with results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResultsPath = 'frontend/playwright-report/results.json';

            let resultsContent = '## 🧪 E2E Test Results\n\n';

            if (fs.existsSync(testResultsPath)) {
              const results = JSON.parse(fs.readFileSync(testResultsPath, 'utf8'));
              const stats = results.stats || {};
              
              resultsContent += `- ✅ **Passed**: ${stats.expected || 0}\n`;
              resultsContent += `- ❌ **Failed**: ${stats.unexpected || 0}\n`;
              resultsContent += `- ⏭️  **Skipped**: ${stats.skipped || 0}\n`;
              resultsContent += `- ⏱️  **Duration**: ${stats.duration ? (stats.duration / 1000).toFixed(2) + 's' : 'N/A'}\n\n`;
              
              if (stats.unexpected > 0) {
                resultsContent += '⚠️  **Some tests failed** - Please review the artifacts.\n\n';
              } else {
                resultsContent += '✅ **All tests passed!**\n\n';
              }
              
              resultsContent += `📊 [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            } else {
              resultsContent += '⚠️  Test results not found.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resultsContent
            });

      - name: Stop services
        if: always()
        run: |
          echo "🛑 Stopping services..."
          docker compose -f docker-compose.yml down -v
          docker compose -f docker-compose.services.yml down -v
          echo "✅ Services stopped"

      - name: Final status
        if: always()
        run: |
          if [ "${{ steps.e2e_tests.outcome }}" = "success" ]; then
            echo "✅ E2E tests PASSED"
            exit 0
          else
            echo "❌ E2E tests FAILED"
            exit 1
          fi
