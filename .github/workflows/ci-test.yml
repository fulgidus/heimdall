name: CI Tests

on:
  push:
    branches: [fix/*]
  pull_request:
    branches: [main, develop]

jobs:
  # First job: discovery - scopri quali servizi sono testabili
  discover:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.discover.outputs.services }}
      services_count: ${{ steps.discover.outputs.count }}
    steps:
      - uses: actions/checkout@v4

      - name: Discover testable services
        id: discover
        run: |
          # Cerca tutti i servizi con requirements.txt e tests/
          services=()
          for service_dir in services/*/; do
            service_name=$(basename "$service_dir")
            if [ -f "$service_dir/requirements.txt" ] && [ -d "$service_dir/tests" ]; then
              services+=("\"$service_name\"")
            fi
          done

          if [ ${#services[@]} -eq 0 ]; then
            echo "Nessun servizio testabile trovato!"
            echo "services=[]" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
          else
            services_json="[$(IFS=,; echo "${services[*]}")]"
            echo "services=$services_json" >> $GITHUB_OUTPUT
            echo "count=${#services[@]}" >> $GITHUB_OUTPUT
            echo "[OK] Servizi trovati: $services_json"
          fi

  # Main test job
  test:
    runs-on: ubuntu-latest
    needs: discover

    # Skip se non ci sono servizi
    if: needs.discover.outputs.services != '[]'

    # Define credentials once for the entire job
    env:
      # PostgreSQL credentials
      POSTGRES_DB: heimdall_test
      POSTGRES_USER: heimdall_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

      # RabbitMQ credentials
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest

      # Redis configuration
      REDIS_HOST: localhost
      REDIS_PORT: 6379

      # Python path
      PYTHONPATH: ${{ github.workspace }}

      # Test configuration
      TESTING: "true"
      LOG_LEVEL: "WARNING"
      CELERY_ALWAYS_EAGER: "true"
      CELERY_EAGER_PROPAGATES_EXCEPTIONS: "true"

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U ${POSTGRES_USER}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: ${{ env.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ env.RABBITMQ_PASS }}
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    strategy:
      matrix:
        python-version: ["3.11"]
        service: ${{ fromJson(needs.discover.outputs.services) }}
      fail-fast: false # Continua se un servizio fallisce

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display service info
        run: |
          echo "[SETUP] Testing service: ${{ matrix.service }}"
          echo "[FILES] Python version: ${{ matrix.python-version }}"
          ls -la services/${{ matrix.service }}/

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/requirements.txt', 'services/${{ matrix.service }}/requirements-*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest pytest-cov pytest-asyncio pytest-timeout black ruff

      - name: Install service dependencies
        run: |
          cd services/${{ matrix.service }}
          echo "[PKG] Installing requirements from $(pwd)/requirements.txt"
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt --timeout=120
          else
            echo "[WARN] No requirements.txt found"
          fi

          # Installa anche requirements-test.txt se esiste
          if [ -f requirements-test.txt ]; then
            echo "[PKG] Installing test requirements"
            pip install -r requirements-test.txt --timeout=120
          fi

      - name: Format check with black
        continue-on-error: true # Non blocca se fallisce
        run: |
          cd services/${{ matrix.service }}
          if [ -d src ]; then
            echo "[FORMAT] Checking code formatting with black..."
            black --check src/ 2>&1 || true
            echo "[WARN] Format issues found (not blocking)"
          else
            echo "[SKIP] No src/ directory to format check"
          fi

      - name: Lint with ruff
        continue-on-error: true
        run: |
          cd services/${{ matrix.service }}
          if [ -d src ]; then
            echo "[LINT] Linting with ruff..."
            ruff check src/ 2>&1 || echo "[WARN] Lint issues (not blocking)"
          else
            echo "[SKIP] No src/ directory to lint"
          fi

      - name: Verify Python imports path configuration
        run: |
          cd services/${{ matrix.service }}
          echo "Configuring Python path..."
          export PYTHONPATH="${PWD}/src:${PWD}:${PYTHONPATH}"
          echo "PYTHONPATH=${PYTHONPATH}"

      - name: Test with pytest (unit tests only)
        timeout-minutes: 30
        run: |
          cd services/${{ matrix.service }}
          export PYTHONPATH="${PWD}/src:${PWD}:${PYTHONPATH}"

          if [ ! -d tests ]; then
            echo "No tests directory"
            exit 0
          fi

          pytest tests/ \
            -v --tb=line --timeout=120 \
            --cov=src --cov-report=xml --cov-report=term:skip-covered \
            -k "not e2e and not integration" --maxfail=3 || \
            (exit_code=$?; if [ $exit_code -eq 5 ]; then exit 0; else exit $exit_code; fi)

      - name: "Generate coverage report"
        if: always()
        continue-on-error: true
        run: |
          cd services/${{ matrix.service }}
          if [ -f coverage.xml ]; then
            echo "[REPORT] Coverage report generated"
            cat coverage.xml | head -20
          fi

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: coverage-${{ matrix.service }}
          fail_ci_if_error: false

  # Frontend testing job
  frontend-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          echo "[SETUP] Installing npm packages..."
          npm ci

      - name: Lint frontend code
        continue-on-error: true
        run: |
          cd frontend
          echo "[LINT] Running ESLint..."
          npm run lint || echo "[WARN] Lint issues found (not blocking)"

      - name: Build frontend
        run: |
          cd frontend
          echo "[BUILD] Building frontend application..."
          npm run build

      - name: Test frontend
        run: |
          cd frontend
          echo "[TEST] Running frontend tests..."
          npm run test:run

  # Job finale: riassunto con FAIL corretto
  test-summary:
    runs-on: ubuntu-latest
    needs: [discover, test, frontend-test]
    if: always()

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Calculate test results
        id: results
        run: |
          echo "Services tested: ${{ needs.discover.outputs.services_count }}"
          echo "Backend test result: ${{ needs.test.result }}"
          echo "Frontend test result: ${{ needs.frontend-test.result }}"

          # Controlla se backend è fallito
          backend_failed=false
          if [ "${{ needs.test.result }}" != "success" ] && [ "${{ needs.discover.outputs.services_count }}" != "0" ]; then
            backend_failed=true
          fi

          # Controlla se frontend è fallito
          frontend_failed=false
          if [ "${{ needs.frontend-test.result }}" != "success" ]; then
            frontend_failed=true
          fi

          # Se almeno uno è fallito, fallisci il summary
          if [ "$backend_failed" = true ] || [ "$frontend_failed" = true ]; then
            echo "status=FAILED" >> $GITHUB_OUTPUT
            echo "[FAIL] TESTS FAILED - CI workflow will fail"
            if [ "$backend_failed" = true ]; then
              echo "  - Backend tests: FAILED"
            fi
            if [ "$frontend_failed" = true ]; then
              echo "  - Frontend tests: FAILED"
            fi
            exit 1
          else
            echo "status=PASSED" >> $GITHUB_OUTPUT
            echo "[OK] ALL TESTS PASSED"
            echo "  - Backend tests: PASSED"
            echo "  - Frontend tests: PASSED"
            exit 0
          fi

      - name: Comment PR with CI results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            let resultsContent = '## 🔬 CI Test Results\n\n';

            const servicesCount = '${{ needs.discover.outputs.services_count }}';
            const backendResult = '${{ needs.test.result }}';
            const frontendResult = '${{ needs.frontend-test.result }}';

            // Backend Tests Section
            resultsContent += '### 🔧 Backend Tests\n';
            if (servicesCount === '0') {
              resultsContent += '⚠️  **No testable services found**\n\n';
            } else {
              resultsContent += `- 📦 **Services tested**: ${servicesCount}\n`;
              if (backendResult === 'success') {
                resultsContent += '- ✅ **Status**: All backend tests passed\n\n';
              } else {
                resultsContent += '- ❌ **Status**: Some backend tests failed\n\n';
              }
            }

            // Frontend Tests Section
            resultsContent += '### 🎨 Frontend Tests\n';
            if (frontendResult === 'success') {
              resultsContent += '- ✅ **Status**: All frontend tests passed\n';
              resultsContent += '- 🔍 **Linting**: Completed\n';
              resultsContent += '- 🏗️  **Build**: Successful\n\n';
            } else {
              resultsContent += '- ❌ **Status**: Frontend tests failed\n';
              resultsContent += '- ⚠️  **Issues**: Check build, lint, or test failures\n\n';
            }

            // Overall Status
            const overallStatus = '${{ steps.results.outputs.status }}';
            if (overallStatus === 'FAILED') {
              resultsContent += '❌ **Overall Result**: CI tests failed - Please review the failures above.\n\n';
            } else {
              resultsContent += '✅ **Overall Result**: All CI tests passed successfully!\n\n';
            }

            resultsContent += `📋 [View detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resultsContent
            });

      - name: Final status
        if: always()
        run: |
          if [ "${{ steps.results.outputs.status }}" == "FAILED" ]; then
            echo "[RED] CI FAILED - Please fix test failures above"
            exit 1
          else
            echo "[GREEN] CI PASSED - All tests successful"
            exit 0
          fi
