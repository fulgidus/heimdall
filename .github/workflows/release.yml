name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Solo se è un tag su develop
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_without_v=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Extract changelog section
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.version_without_v }}

          # Estrae il contenuto tra [VERSION] e il prossimo [VERSION]
          # Usa awk per trovare la sezione
          CHANGELOG=$(awk -v ver="$VERSION" '
            /^\[\[/ { next }
            /^\['"$VERSION"'\]/ { flag=1; next }
            flag && /^\[/ { flag=0 }
            flag { print }
          ' CHANGELOG.md)

          # Se vuoto, usa tutta la sezione fino al prossimo heading
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG=$(awk -v ver="$VERSION" '
              /^\['"$VERSION"'\]/ { flag=1; next }
              flag && /^##/ && !/^###/ { exit }
              flag { print }
            ' CHANGELOG.md)
          fi

          # Escapa per usare in GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "content=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.content }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-to-main:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge develop to main
        run: |
          git checkout main
          git merge develop -m "Merge develop into main for release ${{ github.ref_name }}"
          git push origin main

      - name: Push tag to main
        run: |
          # Verifica che il tag sia presente localmente
          git fetch origin ${{ github.ref_name }}
          # Se il tag non è già su main, lo pushiamo
          git push origin ${{ github.ref_name }} || echo "Tag already exists"

  update-version:
    runs-on: ubuntu-latest
    needs: merge-to-main
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: develop

      - name: Extract version for next
        id: next_version
        run: |
          CURRENT=${{ github.ref_name }}
          CURRENT_WITHOUT_V=${CURRENT#v}

          # Incrementa la patch version per il prossimo rilascio
          # es: v0.2.0 -> v0.2.1-dev
          MAJOR=$(echo $CURRENT_WITHOUT_V | cut -d. -f1)
          MINOR=$(echo $CURRENT_WITHOUT_V | cut -d. -f2)
          PATCH=$(echo $CURRENT_WITHOUT_V | cut -d. -f3)

          NEW_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update version in pyproject.toml
        run: |
          # Update pyproject.toml con la nuova versione
          sed -i 's/version = "[^"]*"/version = "${{ steps.next_version.outputs.next_version }}"/' pyproject.toml

      - name: Update version in frontend/package.json
        run: |
          # Update package.json con la nuova versione
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.next_version.outputs.next_version }}"/' frontend/package.json

      - name: Update CHANGELOG.md
        run: |
          # Crea una nuova sezione [Unreleased] all'inizio
          {
            echo "# Changelog"
            echo ""
            echo "All notable changes to the Heimdall SDR project will be documented in this file."
            echo ""
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),"
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)."
            echo ""
            echo "---"
            echo ""
            echo "## [Unreleased]"
            echo ""
            echo "### Added"
            echo "- Nothing yet"
            echo ""
            echo "### Fixed"
            echo "- Nothing yet"
            echo ""
            echo "---"
            echo ""
            tail -n +9 CHANGELOG.md
          } > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md

      - name: Commit version updates
        run: |
          git add pyproject.toml frontend/package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.next_version.outputs.next_version }} [skip ci]" || echo "No changes to commit"
          git push origin develop
