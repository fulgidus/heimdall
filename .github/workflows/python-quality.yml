name: Python Code Quality

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/**/*.py'
      - 'scripts/**/*.py'
      - 'pyproject.toml'
      - '.github/workflows/python-quality.yml'
  push:
    branches: [main, develop]
    paths:
      - 'services/**/*.py'
      - 'scripts/**/*.py'
      - 'pyproject.toml'

jobs:
  python-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Allow skipping with label
    if: |
      !contains(github.event.pull_request.labels.*.name, 'skip-quality-checks')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
            ${{ runner.os }}-pip-
      
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install black ruff mypy pytest pytest-cov pytest-asyncio
      
      - name: Install service dependencies (for type checking)
        run: |
          # Install common dependencies
          if [ -f services/common/requirements-base.txt ]; then
            pip install -r services/common/requirements-base.txt
          fi
          
          # Install each service's dependencies for complete type checking
          for service_dir in services/*/; do
            service_name=$(basename "$service_dir")
            if [ -f "$service_dir/requirements.txt" ]; then
              echo "Installing $service_name dependencies..."
              pip install -r "$service_dir/requirements.txt" || echo "Warning: Some deps for $service_name failed"
            fi
          done
      
      - name: Black formatting check
        id: black
        continue-on-error: true
        run: |
          echo "## Black Formatting Check" >> $GITHUB_STEP_SUMMARY
          black --check services/ scripts/ 2>&1 | tee black-output.txt
          exit_code=${PIPESTATUS[0]}
          
          if [ $exit_code -eq 0 ]; then
            echo "‚úÖ **Black formatting: PASS**" >> $GITHUB_STEP_SUMMARY
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            error_count=$(grep -c "would reformat" black-output.txt || echo "0")
            echo "‚ùå **Black formatting: FAIL**" >> $GITHUB_STEP_SUMMARY
            echo "- Files needing formatting: $error_count" >> $GITHUB_STEP_SUMMARY
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "errors=$error_count" >> $GITHUB_OUTPUT
          fi
          exit $exit_code
      
      - name: Ruff linting check
        id: ruff
        continue-on-error: true
        run: |
          echo "## Ruff Linting Check" >> $GITHUB_STEP_SUMMARY
          ruff check services/ scripts/ --output-format=json > ruff-report.json 2>&1 || true
          ruff check services/ scripts/ 2>&1 | tee ruff-output.txt
          exit_code=${PIPESTATUS[0]}
          
          if [ $exit_code -eq 0 ]; then
            echo "‚úÖ **Ruff linting: PASS** (0 errors)" >> $GITHUB_STEP_SUMMARY
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            error_count=$(cat ruff-report.json | grep -o '"code":' | wc -l || echo "0")
            echo "‚ùå **Ruff linting: FAIL** ($error_count issues)" >> $GITHUB_STEP_SUMMARY
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "errors=$error_count" >> $GITHUB_OUTPUT
          fi
          exit $exit_code
      
      - name: mypy type checking
        id: mypy
        continue-on-error: true
        run: |
          echo "## mypy Type Checking" >> $GITHUB_STEP_SUMMARY
          mypy services/ scripts/ --config-file=pyproject.toml 2>&1 | tee mypy-output.txt
          exit_code=${PIPESTATUS[0]}
          
          if [ $exit_code -eq 0 ]; then
            echo "‚úÖ **mypy type check: PASS**" >> $GITHUB_STEP_SUMMARY
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "errors=0" >> $GITHUB_OUTPUT
          else
            error_count=$(grep -c "error:" mypy-output.txt || echo "0")
            echo "‚ùå **mypy type check: FAIL** ($error_count errors)" >> $GITHUB_STEP_SUMMARY
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "errors=$error_count" >> $GITHUB_OUTPUT
          fi
          exit $exit_code
      
      - name: Run pytest with coverage
        id: pytest
        run: |
          echo "## Pytest Coverage" >> $GITHUB_STEP_SUMMARY
          pytest services/ \
            --cov=services \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html \
            -k "not e2e and not integration" \
            --tb=short \
            2>&1 | tee pytest-output.txt
          
          # Extract coverage percentage
          coverage_pct=$(grep -oP "TOTAL.*\K\d+%" pytest-output.txt | tail -1 || echo "0%")
          coverage_num=$(echo $coverage_pct | sed 's/%//')
          
          echo "coverage_pct=$coverage_pct" >> $GITHUB_OUTPUT
          echo "coverage_num=$coverage_num" >> $GITHUB_OUTPUT
          
          if [ "$coverage_num" -ge 80 ]; then
            echo "‚úÖ **Coverage: $coverage_pct** (meets 80% threshold)" >> $GITHUB_STEP_SUMMARY
            echo "status=PASS" >> $GITHUB_OUTPUT
          else
            echo "‚ùå **Coverage: $coverage_pct** (below 80% threshold)" >> $GITHUB_STEP_SUMMARY
            echo "status=FAIL" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: python-quality
          name: python-quality-coverage
          fail_ci_if_error: false
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage_reports/
            pytest-output.txt
            black-output.txt
            ruff-output.txt
            ruff-report.json
            mypy-output.txt
      
      - name: Post PR comment with results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const black_status = '${{ steps.black.outputs.status }}' || 'FAIL';
            const black_errors = '${{ steps.black.outputs.errors }}' || '0';
            const ruff_status = '${{ steps.ruff.outputs.status }}' || 'FAIL';
            const ruff_errors = '${{ steps.ruff.outputs.errors }}' || '0';
            const mypy_status = '${{ steps.mypy.outputs.status }}' || 'FAIL';
            const mypy_errors = '${{ steps.mypy.outputs.errors }}' || '0';
            const coverage_pct = '${{ steps.pytest.outputs.coverage_pct }}' || '0%';
            const coverage_status = '${{ steps.pytest.outputs.status }}' || 'FAIL';
            
            const black_icon = black_status === 'PASS' ? '‚úÖ' : '‚ùå';
            const ruff_icon = ruff_status === 'PASS' ? '‚úÖ' : '‚ùå';
            const mypy_icon = mypy_status === 'PASS' ? '‚úÖ' : '‚ùå';
            const coverage_icon = coverage_status === 'PASS' ? '‚úÖ' : '‚ùå';
            
            const comment = `## üêç Python Code Quality Results
            
            ${black_icon} **Black formatting**: ${black_status}${black_status === 'FAIL' ? ` (${black_errors} files need formatting)` : ''}
            ${ruff_icon} **Ruff linting**: ${ruff_status}${ruff_status === 'FAIL' ? ` (${ruff_errors} issues)` : ' (0 errors)'}
            ${mypy_icon} **mypy type check**: ${mypy_status}${mypy_status === 'FAIL' ? ` (${mypy_errors} errors)` : ''}
            ${coverage_icon} **Coverage**: ${coverage_pct}${coverage_status === 'FAIL' ? ' (below 80% threshold)' : ' (meets threshold)'}
            
            üìã [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${black_status === 'FAIL' || ruff_status === 'FAIL' || mypy_status === 'FAIL' || coverage_status === 'FAIL' ? '‚ö†Ô∏è **Action required**: Please address the failing checks above.' : '‚úÖ **All quality checks passed!**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Fail workflow if any check failed
        if: always()
        run: |
          black_status="${{ steps.black.outcome }}"
          ruff_status="${{ steps.ruff.outcome }}"
          mypy_status="${{ steps.mypy.outcome }}"
          pytest_status="${{ steps.pytest.outcome }}"
          
          if [ "$black_status" != "success" ] || [ "$ruff_status" != "success" ] || \
             [ "$mypy_status" != "success" ] || [ "$pytest_status" != "success" ]; then
            echo "‚ùå One or more quality checks failed"
            echo "Black: $black_status"
            echo "Ruff: $ruff_status"
            echo "mypy: $mypy_status"
            echo "pytest: $pytest_status"
            exit 1
          else
            echo "‚úÖ All quality checks passed"
            exit 0
          fi
