name: Test Coverage Report

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    name: Generate & Deploy Coverage Report

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov python-dotenv

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install

      - name: Run backend tests with coverage
        continue-on-error: true
        run: |
          mkdir -p coverage_reports
          pytest \
            --cov=services \
            --cov-report=html:coverage_reports/backend \
            --cov-report=json:coverage_reports/backend.json \
            --cov-report=term \
            -v 2>&1 | tee coverage_reports/backend.log

      - name: Run frontend tests with coverage
        continue-on-error: true
        run: |
          cd frontend
          pnpm run test:coverage 2>&1 | tee ../coverage_reports/frontend.log || true
          if [ -d coverage ]; then
            mv coverage ../coverage_reports/frontend
          fi

      - name: Generate coverage badge
        continue-on-error: true
        run: |
          python scripts/generate_coverage_badge.py

      - name: Generate coverage summary
        continue-on-error: true
        run: |
          python scripts/create_coverage_summary.py coverage_reports/backend.json

      - name: Create merged coverage index
        run: |
          python scripts/create_coverage_index.py

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.ref_name }}
          path: coverage_reports/
          retention-days: 30

      - name: Deploy coverage to GitHub Pages
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage_reports
          destination_dir: coverage/${{ github.ref_name }}
          keep_files: true

      - name: Comment PR with coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            let coverage_text = '## 📊 Coverage Report\n\n';

            try {
              const backend_coverage = JSON.parse(fs.readFileSync('coverage_reports/backend.json', 'utf8'));
              const percent = backend_coverage.totals.percent_covered.toFixed(2);
              coverage_text += `**Backend Coverage:** ${percent}%\n`;
            } catch(e) {
              coverage_text += '**Backend Coverage:** ⚠️ Failed to generate\n';
            }

            coverage_text += `\n[📄 View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverage_text
            });

      - name: Update coverage badge in README
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        continue-on-error: true
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/coverage/README.md docs/coverage/badge.svg 2>/dev/null || true
          git diff --cached --quiet || (git commit -m "ci: update coverage report [skip ci]" && git push)

  deploy-pages:
    needs: coverage
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout coverage reports
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          sparse-checkout: coverage
          sparse-checkout-cone: false

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "coverage"

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v3
