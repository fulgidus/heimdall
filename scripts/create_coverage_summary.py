#!/usr/bin/env python3
"""Generate markdown summary from coverage.json"""

import json
from datetime import datetime
from pathlib import Path


def format_percentage(value: float) -> str:
    """Format percentage with emoji indicator"""
    if value >= 85:
        emoji = '🟢'
    elif value >= 75:
        emoji = '🟢'
    elif value >= 60:
        emoji = '🟡'
    elif value >= 40:
        emoji = '🟠'
    else:
        emoji = '🔴'
    return f'{emoji} {value:.1f}%'


def generate_coverage_summary(coverage_json_path: str, output_md_path: str) -> None:
    """Generate markdown summary from coverage.json"""
    
    if not Path(coverage_json_path).exists():
        print(f'⚠️  Coverage file not found: {coverage_json_path}')
        # Create minimal README
        Path(output_md_path).parent.mkdir(parents=True, exist_ok=True)
        with open(output_md_path, 'w') as f:
            f.write('# Test Coverage Report\n\nCoverage report not yet generated.\n')
        return
    
    try:
        with open(coverage_json_path, 'r') as f:
            data = json.load(f)
    except (json.JSONDecodeError, KeyError) as e:
        print(f'❌ Error parsing coverage file: {e}')
        return
    
    totals = data['totals']
    timestamp = datetime.now().isoformat()
    
    # Calcola statistiche
    num_files = len(data['files'])
    percent_covered = totals['percent_covered']
    lines_covered = totals['covered_lines']
    lines_total = totals['num_statements']
    
    # Status basato su coverage
    if percent_covered >= 85:
        status_emoji = '✅'
        status_text = 'Excellent'
    elif percent_covered >= 75:
        status_emoji = '✅'
        status_text = 'Good'
    elif percent_covered >= 60:
        status_emoji = '⚠️'
        status_text = 'Fair'
    elif percent_covered >= 40:
        status_emoji = '❌'
        status_text = 'Poor'
    else:
        status_emoji = '🚨'
        status_text = 'Critical'
    
    # Crea tabella per file critici
    files_sorted = sorted(
        data['files'].items(),
        key=lambda x: x[1]['summary']['percent_covered']
    )
    
    md_content = f'''# 📊 Test Coverage Report

**Last Updated:** {timestamp}  
**Status:** {status_emoji} {status_text}

## Overall Statistics

| Metric | Value |
|--------|-------|
| **Coverage** | {format_percentage(percent_covered)} |
| **Files Analyzed** | {num_files} |
| **Lines Covered** | {lines_covered:,} / {lines_total:,} |
| **Branch** | `${{{{ github.ref_name }}}}` |

## Files with Lowest Coverage

| File | Coverage | Lines |
|------|----------|-------|
'''
    
    # Mostra i file con copertura più bassa (max 15)
    for file_path, file_data in files_sorted[:15]:
        coverage = file_data['summary']['percent_covered']
        summary = file_data['summary']
        covered = summary['covered_lines']
        total = summary['num_statements']
        
        # Rimuovi il percorso completo per leggibilità
        short_path = file_path.replace('services/', '').replace('frontend/', '')
        if len(short_path) > 50:
            short_path = '...' + short_path[-47:]
        
        md_content += f"| `{short_path}` | {format_percentage(coverage)} | {covered}/{total} |\n"
    
    md_content += f'''

## Coverage Status Guide

| Range | Status | Indicator |
|-------|--------|-----------|
| ≥85% | Excellent | 🟢 |
| 75-84% | Good | 🟢 |
| 60-74% | Fair | 🟡 |
| 40-59% | Poor | 🟠 |
| <40% | Critical | 🔴 |

## Details

- **Repository:** [{data.get('file_reporter', 'N/A')}](https://github.com/${{{{ github.repository }}}})
- **Workflow:** [GitHub Actions](.github/workflows/coverage.yml)
- **CI Status:** Available in [GitHub Actions](${{{{ github.server_url }}}}/{{ github.repository }}/actions)

---

*This report is automatically generated by GitHub Actions on every push to `main` and `develop` branches.*

**Last Run:** [{timestamp}](${{{{ github.server_url }}}}/{{ github.repository }}/actions/runs/${{{{ github.run_id }}}})
'''
    
    # Crea directory se non esiste
    Path(output_md_path).parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_md_path, 'w') as f:
        f.write(md_content)
    
    print(f'✅ Coverage summary created: {output_md_path}')
    print(f'   Overall Coverage: {percent_covered:.2f}% ({status_text})')
    print(f'   Files analyzed: {num_files}')


def main():
    """Main entry point"""
    import sys
    json_file = sys.argv[1] if len(sys.argv) > 1 else 'coverage_reports/backend.json'
    output_file = 'docs/coverage/README.md'
    generate_coverage_summary(json_file, output_file)


if __name__ == '__main__':
    main()
