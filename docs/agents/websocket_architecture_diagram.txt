# WebSocket Architecture Diagram

```
┌─────────────────────────────────────────────────────────────────────┐
│                         Frontend (React)                            │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                    Dashboard Component                        │  │
│  │                                                               │  │
│  │  ┌────────────────────────────────────────────────────────┐  │  │
│  │  │  Connection Status Badge                               │  │  │
│  │  │  ┌─────┐ ┌───────────┐ ┌──────────────┐               │  │  │
│  │  │  │ 🔴  │ │ Reconnect │ │ Last Update  │               │  │  │
│  │  │  │ Icon│ │  Button   │ │  Timestamp   │               │  │  │
│  │  │  └─────┘ └───────────┘ └──────────────┘               │  │  │
│  │  └────────────────────────────────────────────────────────┘  │  │
│  │                                                               │  │
│  │  Uses: useDashboardStore()                                   │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                     │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                    Dashboard Store (Zustand)                  │  │
│  │                                                               │  │
│  │  State:                                                       │  │
│  │   • wsManager: WebSocketManager | null                       │  │
│  │   • wsConnectionState: ConnectionState                       │  │
│  │   • wsEnabled: boolean                                       │  │
│  │                                                               │  │
│  │  Methods:                                                     │  │
│  │   • connectWebSocket()                                       │  │
│  │   • disconnectWebSocket()                                    │  │
│  │   • setWebSocketState()                                      │  │
│  │                                                               │  │
│  │  Event Handlers:                                             │  │
│  │   • services:health → update servicesHealth                 │  │
│  │   • websdrs:status → update websdrsHealth                   │  │
│  │   • signals:detected → increment signalDetections           │  │
│  │   • localizations:updated → update lastUpdate               │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                 │                                   │
│                                 │ uses                              │
│                                 ▼                                   │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │              WebSocket Manager (websocket.ts)                 │  │
│  │                                                               │  │
│  │  Features:                                                    │  │
│  │   • Auto-reconnection (exponential backoff: 1s→30s)          │  │
│  │   • Connection state tracking                                │  │
│  │   • Event subscription/unsubscription                        │  │
│  │   • Heartbeat/ping-pong (30s interval)                       │  │
│  │                                                               │  │
│  │  Connection States:                                          │  │
│  │   🔴 DISCONNECTED  (polling fallback)                        │  │
│  │   🟡 CONNECTING    (initial connection)                      │  │
│  │   🟢 CONNECTED     (real-time updates)                       │  │
│  │   🟡 RECONNECTING  (auto-reconnect)                          │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                     │
└─────────────────────────────────────────────────────────────────────┘
                                 │
                                 │ WebSocket connection
                                 │ ws://localhost:8000/ws/updates
                                 ▼
┌─────────────────────────────────────────────────────────────────────┐
│                    Backend (FastAPI - API Gateway)                  │
├─────────────────────────────────────────────────────────────────────┤
│                                                                     │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                  WebSocket Endpoint                           │  │
│  │                  /ws/updates                                  │  │
│  │                                                               │  │
│  │  Handles:                                                     │  │
│  │   • Connection acceptance                                    │  │
│  │   • Heartbeat task (30s ping/pong)                          │  │
│  │   • Message routing (ping, subscribe, unsubscribe)          │  │
│  │   • Client disconnection cleanup                            │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                 │                                   │
│                                 │ uses                              │
│                                 ▼                                   │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │              Connection Manager                               │  │
│  │              (websocket_manager.py)                           │  │
│  │                                                               │  │
│  │  Manages:                                                     │  │
│  │   • Active connections: Set[WebSocket]                       │  │
│  │   • Subscriptions: Dict[str, Set[WebSocket]]                │  │
│  │                                                               │  │
│  │  Methods:                                                     │  │
│  │   • connect(websocket)                                       │  │
│  │   • disconnect(websocket)                                    │  │
│  │   • broadcast(event, data)                                   │  │
│  │   • broadcast_to_subscribers(event, data)                   │  │
│  │   • subscribe(websocket, event)                             │  │
│  │   • unsubscribe(websocket, event)                           │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                 ▲                                   │
│                                 │ broadcasts events                 │
│  ┌──────────────────────────────┴───────────────────────────────┐  │
│  │                                                               │  │
│  │  Event Sources:                                              │  │
│  │   • /api/v1/system/status → services:health                 │  │
│  │   • WebSDR health check → websdrs:status (future)           │  │
│  │   • RF acquisition → signals:detected (future)              │  │
│  │   • Inference service → localizations:updated (future)      │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                     │
└─────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════
                          Message Flow Example
═══════════════════════════════════════════════════════════════════════

1. User opens Dashboard
   ↓
2. Dashboard.tsx useEffect() calls connectWebSocket()
   ↓
3. WebSocketManager.connect() establishes connection to /ws/updates
   ↓
4. Backend accepts connection, adds to ConnectionManager
   ↓
5. Frontend subscribes to events: services:health, websdrs:status, etc.
   ↓
6. Backend starts heartbeat task (ping every 30s)
   ↓
7. ═══════════════════════════════════════════════════════════════
   │                    Real-Time Updates                        │
   ═══════════════════════════════════════════════════════════════
   
   When /api/v1/system/status is called:
   ↓
   Backend broadcasts: { event: "services:health", data: {...} }
   ↓
   WebSocketManager receives message
   ↓
   Calls subscribed callbacks
   ↓
   Dashboard store updates state
   ↓
   React re-renders with new data (< 50ms latency)

8. User closes Dashboard
   ↓
9. Dashboard.tsx useEffect cleanup calls disconnectWebSocket()
   ↓
10. WebSocketManager closes connection
    ↓
11. Backend detects disconnection, removes from ConnectionManager

═══════════════════════════════════════════════════════════════════════
                         Reconnection Flow
═══════════════════════════════════════════════════════════════════════

1. Connection drops (network issue, server restart, etc.)
   ↓
2. WebSocketManager onclose handler triggered
   ↓
3. State changes to RECONNECTING
   ↓
4. Schedule reconnect with exponential backoff:
   • Attempt 1: 1s delay
   • Attempt 2: 2s delay
   • Attempt 3: 4s delay
   • Attempt 4: 8s delay
   • Attempt 5: 16s delay
   • Attempt 6+: 30s delay (max)
   ↓
5. If reconnect succeeds:
   • State → CONNECTED
   • Reset backoff counter
   • Resume real-time updates
   
6. If reconnect fails repeatedly:
   • Continue trying with 30s backoff
   • Dashboard falls back to polling (30s interval)
   • User can manually reconnect via button

═══════════════════════════════════════════════════════════════════════
